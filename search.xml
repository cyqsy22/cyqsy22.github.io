<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AutoCAD安装</title>
      <link href="/2022/02/28/AutoCAD%E5%AE%89%E8%A3%85/"/>
      <url>/2022/02/28/AutoCAD%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h1><p><a href="https://www.autodesk.com.cn/products/autocad/overview" target="_blank" rel="noopener">https://www.autodesk.com.cn/products/autocad/overview</a></p><h1 id="破解版下载"><a href="#破解版下载" class="headerlink" title="破解版下载"></a>破解版下载</h1><p>1.「2022」<a href="https://www.aliyundrive.com/s/P5hBn5eJyb2" target="_blank" rel="noopener">https://www.aliyundrive.com/s/P5hBn5eJyb2</a> 提取码: 4s3c 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p><p>2.<img src="/2022/02/28/AutoCAD%E5%AE%89%E8%A3%85/1.png" class=""></p><p>安装该程序，若弹出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">安装程序时必须更新在系统运行时无法更新文件或服务。如果选择继续，将需要重启以完成安装程序 &#x2F;&#x2F;选择 确定</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请重新启动已完成安装 &#x2F;&#x2F;选择 稍后</span><br></pre></td></tr></table></figure><p>3.<img src="/2022/02/28/AutoCAD%E5%AE%89%E8%A3%85/2.png" class=""></p><p>安装好以后，复制该文件。去桌面找到安装好的autocad，右击-打开文件所在位置，将复制好的文件粘贴到该文件夹中。</p><p>4.右击该文件，选择以管理员身份运行</p><p>5.<img src="/2022/02/28/AutoCAD%E5%AE%89%E8%A3%85/3.png" class=""></p><p>弹出该界面，选择应用</p>]]></content>
      
      
      <categories>
          
          <category> AutoCAD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoCAD </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql安装</title>
      <link href="/2022/02/28/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/"/>
      <url>/2022/02/28/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL下载"><a href="#MySQL下载" class="headerlink" title="MySQL下载"></a>MySQL下载</h1><p><a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/installer/</a></p><h1 id="Microsoft-Visual-C-Redistributable2019"><a href="#Microsoft-Visual-C-Redistributable2019" class="headerlink" title="Microsoft Visual C++ Redistributable2019"></a>Microsoft Visual C++ Redistributable2019</h1><p><a href="https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-170" target="_blank" rel="noopener">https://docs.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-170</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装</title>
      <link href="/2022/02/28/linux%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/02/28/linux%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="VMWare-windows版安装"><a href="#VMWare-windows版安装" class="headerlink" title="VMWare windows版安装"></a>VMWare windows版安装</h1><p><a href="https://www.vmware.com/go/getworkstation-win" target="_blank" rel="noopener">https://www.vmware.com/go/getworkstation-win</a><br>激活密钥网上搜</p><h1 id="Linux镜像下载"><a href="#Linux镜像下载" class="headerlink" title="Linux镜像下载"></a>Linux镜像下载</h1><h5 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h5><p><a href="https://www.centos.org/centos-linux/" target="_blank" rel="noopener">https://www.centos.org/centos-linux/</a><br>64位操作系统下载：amd64或x86-64，32位下载：i386选择任意国内镜像网站，下载后缀DVD.iso即可</p><h5 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h5><p><a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener">https://ubuntu.com/download/desktop</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何解决一些常见问题</title>
      <link href="/2022/01/18/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2022/01/18/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="4000端口被占用"><a href="#4000端口被占用" class="headerlink" title="4000端口被占用"></a>4000端口被占用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -aon|findstr &quot;4000&quot; &#x2F;&#x2F;查看被占用端口的PID（最后的数字即PID），以23828为例</span><br><span class="line">$ tasklist|findstr &quot;23828&quot; &#x2F;&#x2F;输入PID，查看占用进程的软件，以WinStore.App.exe为例</span><br><span class="line">$ taskkill &#x2F;f &#x2F;t &#x2F;im WinStore.App.exe &#x2F;&#x2F;杀死进程</span><br></pre></td></tr></table></figure><h1 id="图片无法显示"><a href="#图片无法显示" class="headerlink" title="图片无法显示"></a>图片无法显示</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save &#x2F;&#x2F;下载图片上传插件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">打开node_modules\hexo-asset-image\index.js，内容更改为以下代码：</span><br><span class="line">&#39;use strict&#39;;</span><br><span class="line">var cheerio &#x3D; require(&#39;cheerio&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;14480345&#x2F;how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version &#x3D; String(hexo.version).split(&#39;.&#39;);</span><br><span class="line">hexo.extend.filter.register(&#39;after_post_render&#39;, function(data)&#123;</span><br><span class="line">  var config &#x3D; hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">    var link &#x3D; data.permalink;</span><br><span class="line">if(version.length &gt; 0 &amp;&amp; Number(version[0]) &#x3D;&#x3D; 3)</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 1) + 1;</span><br><span class="line">else</span><br><span class="line">   var beginPos &#x3D; getPosition(link, &#39;&#x2F;&#39;, 3) + 1;</span><br><span class="line">&#x2F;&#x2F; In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;...&#x2F;about&#x2F;index.html&quot;.</span><br><span class="line">var endPos &#x3D; link.lastIndexOf(&#39;&#x2F;&#39;) + 1;</span><br><span class="line">    link &#x3D; link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess &#x3D; [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];</span><br><span class="line">    for(var i &#x3D; 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key &#x3D; toprocess[i];</span><br><span class="line">     </span><br><span class="line">      var $ &#x3D; cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line">    </span><br><span class="line">      $(&#39;img&#39;).each(function()&#123;</span><br><span class="line">    if ($(this).attr(&#39;src&#39;))&#123;</span><br><span class="line">    &#x2F;&#x2F; For windows style path, we replace &#39;\&#39; to &#39;&#x2F;&#39;.</span><br><span class="line">    var src &#x3D; $(this).attr(&#39;src&#39;).replace(&#39;\\&#39;, &#39;&#x2F;&#39;);</span><br><span class="line">    if(!&#x2F;http[s]*.*|\&#x2F;\&#x2F;.*&#x2F;.test(src) &amp;&amp;</span><br><span class="line">       !&#x2F;^\s*\&#x2F;&#x2F;.test(src)) &#123;</span><br><span class="line">      &#x2F;&#x2F; For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.</span><br><span class="line">      &#x2F;&#x2F; In addition, to support multi-level local directory.</span><br><span class="line">      var linkArray &#x3D; link.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">    return elem !&#x3D; &#39;&#39;;</span><br><span class="line">      &#125;);</span><br><span class="line">      var srcArray &#x3D; src.split(&#39;&#x2F;&#39;).filter(function(elem)&#123;</span><br><span class="line">    return elem !&#x3D; &#39;&#39; &amp;&amp; elem !&#x3D; &#39;.&#39;;</span><br><span class="line">      &#125;);</span><br><span class="line">      if(srcArray.length &gt; 1)</span><br><span class="line">    srcArray.shift();</span><br><span class="line">      src &#x3D; srcArray.join(&#39;&#x2F;&#39;);</span><br><span class="line">      $(this).attr(&#39;src&#39;, config.root + link + src);</span><br><span class="line">      console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">    console.info&amp;&amp;console.info($(this));</span><br><span class="line">    &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] &#x3D; $.html();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将 _config.yml 文件中的 post_asset_folder 选项设为 true 来打开。 &#x2F;&#x2F;每次创建文章会生成同名文件夹，将图片存放在这个资源文件夹中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg 描述 %&#125; &#x2F;&#x2F;通过相对路径引用example.jpg图片</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> $ hexo clean</span><br><span class="line"> $ hexo g</span><br><span class="line"> $ hexo d &#x2F;&#x2F;提交</span><br></pre></td></tr></table></figure><h1 id="VS-Code终端无法运行"><a href="#VS-Code终端无法运行" class="headerlink" title="VS Code终端无法运行"></a>VS Code终端无法运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">以管理员身份运行powershell</span><br><span class="line">输入set-ExecutionPolicy RemoteSigned</span><br><span class="line">输入A &#x2F;&#x2F;解决权限问题</span><br></pre></td></tr></table></figure><img src="/2022/01/18/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/vscode%E7%BB%88%E7%AB%AF%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C.png" class="" title="VS Code终端无法运行"> <h1 id="博客迁移、误删"><a href="#博客迁移、误删" class="headerlink" title="博客迁移、误删"></a>博客迁移、误删</h1><p>1.安装node.js、git、hexo</p><p>1）node.js安装</p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js (nodejs.org)</a></p><p>2）git安装</p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git (git-scm.com)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure><p>3）全局安装gexo</p><p>随便打开一个文件夹，打开gitbash运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo -v  &#x2F;&#x2F;查看是否安装成功</span><br></pre></td></tr></table></figure><p>2.生成ssh key</p><p>1）检查ssh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh &#x2F;&#x2F;gitbash自带ssh，检查ssh</span><br></pre></td></tr></table></figure><p>2）生成ssh keys</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C&quot;邮箱地址&quot;  &#x2F;&#x2F;生成ssh，四次回车</span><br></pre></td></tr></table></figure><p>3）将生成的ssh keys添加至github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入C:\Users\windows用户名\.ssh，打开id_rsa.pud，复制内容</span><br><span class="line">打开Github-Settings-SSH and GPG Keys-SSH Keys-新建 名字随便 内容粘贴</span><br></pre></td></tr></table></figure><p>4）测试ssh是否绑定成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">输入yes</span><br></pre></td></tr></table></figure><p>显示Hi，用户名，you’ve successfully…</p><p>5）使当前电脑的git与你的github相连</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global &quot;用户名&quot;</span><br><span class="line">git config --global &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p>3.新建文件夹并覆盖（误删只需执行此步骤）</p><p>1）新建博客文件</p><p>在新电脑上创建一个博客文件夹，使用<code>$ hexo init</code>生成文件</p><p>2）覆盖</p><p>将原来的博客文件夹中的<code>_config.yml、source、themes</code>覆盖到新文件夹中</p><p>3）安装工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save &#x2F;&#x2F;安装hexo-server</span><br><span class="line">$ npm install hexo-deployer-git --save &#x2F;&#x2F;安装自动部署工具</span><br></pre></td></tr></table></figure><p>4）重新安装主题</p><p>4.上传</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h1 id="fatal-unable-to-access"><a href="#fatal-unable-to-access" class="headerlink" title="fatal: unable to access"></a>fatal: unable to access</h1><img src="/2022/01/18/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/lianjie.png" class=""><p>连接github不成功，不用担心，继续尝试吧！</p><h1 id="github仓库存在两个分支"><a href="#github仓库存在两个分支" class="headerlink" title="github仓库存在两个分支"></a>github仓库存在两个分支</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 仓库网址</span><br><span class="line">  branch: main &#x2F;&#x2F;问题出在这里，若选择master，会新建一个master分支</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速搭建一个blog</title>
      <link href="/2022/01/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAblog/"/>
      <url>/2022/01/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAblog/</url>
      
        <content type="html"><![CDATA[<h2 id="安装node-js、git、hexo"><a href="#安装node-js、git、hexo" class="headerlink" title="安装node.js、git、hexo"></a>安装node.js、git、hexo</h2><h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js (nodejs.org)</a></p><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git (git-scm.com)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure><h3 id="全局安装gexo"><a href="#全局安装gexo" class="headerlink" title="全局安装gexo"></a>全局安装gexo</h3><p>随便打开一个文件夹，打开gitbash运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo -v  &#x2F;&#x2F;查看是否安装成功</span><br></pre></td></tr></table></figure><h2 id="搭建GitHub仓库"><a href="#搭建GitHub仓库" class="headerlink" title="搭建GitHub仓库"></a>搭建GitHub仓库</h2><p>新建仓库-Repository name：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">github name.github.io &#x2F;&#x2F;例如caoyuqian1.github.io</span><br><span class="line">Add a README file &#x2F;&#x2F;勾选此项</span><br><span class="line">README.md文件 &#x2F;&#x2F;创建成功后仓库出现</span><br></pre></td></tr></table></figure><h2 id="生成ssh-keys"><a href="#生成ssh-keys" class="headerlink" title="生成ssh keys"></a>生成ssh keys</h2><h3 id="检查ssh"><a href="#检查ssh" class="headerlink" title="检查ssh"></a>检查ssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh &#x2F;&#x2F;gitbash自带ssh，检查ssh（随便打开文件夹右键git bash）</span><br></pre></td></tr></table></figure><h3 id="生成ssh-keys-1"><a href="#生成ssh-keys-1" class="headerlink" title="生成ssh keys"></a>生成ssh keys</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C&quot;github注册邮箱地址&quot;  &#x2F;&#x2F;生成ssh，四次回车</span><br></pre></td></tr></table></figure><h3 id="将ssh-keys添加至github"><a href="#将ssh-keys添加至github" class="headerlink" title="将ssh keys添加至github"></a>将ssh keys添加至github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入C:\Users\windows用户名\.ssh，打开id_rsa.pud，复制内容</span><br><span class="line">打开Github-Settings-SSH and GPG Keys-SSH Keys-新建 名字随便 内容粘贴</span><br></pre></td></tr></table></figure><h3 id="测试ssh是否绑定成功"><a href="#测试ssh是否绑定成功" class="headerlink" title="测试ssh是否绑定成功"></a>测试ssh是否绑定成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">输入yes</span><br></pre></td></tr></table></figure><p>显示Hi，用户名，you’ve successfully…</p><h3 id="使当前电脑的git与你的github相连"><a href="#使当前电脑的git与你的github相连" class="headerlink" title="使当前电脑的git与你的github相连"></a>使当前电脑的git与你的github相连</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global &quot;用户名&quot;</span><br><span class="line">git config --global &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><h2 id="建立blog文件夹"><a href="#建立blog文件夹" class="headerlink" title="建立blog文件夹"></a>建立blog文件夹</h2><h3 id="新建博客文件"><a href="#新建博客文件" class="headerlink" title="新建博客文件"></a>新建博客文件</h3><p>在电脑上创建一个博客文件夹，使用<code>$ hexo init</code>生成文件</p><h3 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Blog\_config.yml &#x2F;&#x2F;打开文件</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">删除这两行下方的内容，并修改为：</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 仓库网址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h3 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save &#x2F;&#x2F;安装服务器启动工具</span><br><span class="line">$ npm install hexo-deployer-git --save &#x2F;&#x2F;安装自动部署工具</span><br></pre></td></tr></table></figure><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g &#x2F;&#x2F;生成静态文件</span><br><span class="line">$ hexo d &#x2F;&#x2F;部署到github</span><br><span class="line">$ hexo s &#x2F;&#x2F;启动服务器，生成http:&#x2F;&#x2F;localhost:4000，启动期间自动更新</span><br></pre></td></tr></table></figure><h2 id="附录-基本命令"><a href="#附录-基本命令" class="headerlink" title="附录 基本命令"></a>附录 基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]&#x2F;$ hexo init</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>例如，建立一个C:\Blog文件夹，输入命令hexo init将文件生成在Blog文件夹中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;title&gt;&#x2F;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果标题包含空格的话，请使用”引号”括起来。</p><p>例如$ hexo new “post title with whitespace”，保存在C:\Blog\source\ _posts中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate&#x2F;$ hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server&#x2F;$ hexo s</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy&#x2F;$ hexo d</span><br></pre></td></tr></table></figure><p>部署网站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 搭建教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code的安装与配置</title>
      <link href="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h5 id="第一步-安装"><a href="#第一步-安装" class="headerlink" title="第一步 安装"></a>第一步 安装</h5><p>1.Visual Studio Code安装</p><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code - Code Editing. Redefined</a></p><p>2.MinGW64 环境安装</p><p><a href="https://sourceforge.net/projects/mingw-w64/files/" target="_blank" rel="noopener">MinGW-w64 - for 32 and 64 bit Windows - Browse Files at SourceForge.net</a></p><p>C:/MinGW64 下文以该路径为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:&#x2F;MinGW64&#x2F;bin(含有g++.exe的目录)</span><br><span class="line">C:&#x2F;MinGW64&#x2F;lib &#x2F;&#x2F;两个关键目录</span><br></pre></td></tr></table></figure><h5 id="第二步-配置环境变量"><a href="#第二步-配置环境变量" class="headerlink" title="第二步 配置环境变量"></a>第二步 配置环境变量</h5><p> 1.添加环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将C:&#x2F;MinGW64&#x2F;bin添加到环境变量 &#x2F;&#x2F;用户变量只对当前登入系统的用户有效，系统变量对所有用户生效</span><br></pre></td></tr></table></figure><p>2.检验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1）Win+R打开运行-输入cmd或powershell 回车，在命令行中输入g++ -v,弹出gcc的版本号。</span><br></pre></td></tr></table></figure><p>注意版本号要与你下载的一致，如果不一致，说明环境变量Path里原本有老版本的编译器，可能是安装其他编译器带上的，最好去掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2）在命令行输入gcc弹出no input files</span><br></pre></td></tr></table></figure><p>如果弹出“不是内部命令或外部命令”，说明gcc在的文件夹没有在Path中，要加进去才行</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/gcc.png" class=""><h5 id="第三步-扩展安装"><a href="#第三步-扩展安装" class="headerlink" title="第三步 扩展安装"></a>第三步 扩展安装</h5><p>必选：</p><ul><li>C/C++</li><li>Code     Runner：右键即可编译运行单文件</li><li>Chinese     (Simplified) Language Pack 中文</li></ul><p>其他可选：</p><ul><li>Bracket Pair     Colorizer 2：彩虹花括号</li><li><p>One Dark Pro：VS     Code安装量最高的主题</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/C.png" class=""></li></ul><h5 id="第四步-对扩展进行配置"><a href="#第四步-对扩展进行配置" class="headerlink" title="第四步 对扩展进行配置"></a>第四步 对扩展进行配置</h5> <img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/peizhi.png" class=""><p>1.code runner</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/code.png" class=""><p>2.c/c++</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/cpp.png" class=""><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/cpp1.png" class=""><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/cpp2.png" class=""><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/cpp3.png" class=""><h5 id="第五步-创建文件工作区"><a href="#第五步-创建文件工作区" class="headerlink" title="第五步 创建文件工作区"></a>第五步 创建文件工作区</h5><p>1.在C盘中创建一个工作区,以C:/V-S-CODE-C为例。选择 文件-打开文件夹</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/gzq.png" class=""><p>2.然后在工作区中新建文件，例如输入test.c，然后开始输代码，最好不要出现中文，因为会变成一段乱码。</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/xj.png" class=""><p>3.运行与调试</p><p>输入代码后，点击右上角运行，在终端中就会显示运行结果</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/ts.png" class=""><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/zd.png" class=""><p>点击左侧的运行与调试栏，并点击开始调试，选择环境-C++(GDB/LLDB),选择配置-g++.exe-生成和调试活动文件，完成后会自动生成两个文件</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/yx.png" class=""><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/hj.png" class=""><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/hjxz.png" class=""><p>完成后，生成文件夹和launch.json,tasks.json文件</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/sc.png" class=""><p>在调试代码时，将鼠标移到数字左侧可以选择断点</p><img src="/2022/01/01/VS-Code%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/dd.png" class="">]]></content>
      
      
      <categories>
          
          <category> Visual Studio Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> 安装与配置 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
